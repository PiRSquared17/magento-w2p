<?php
/** @var $this ZetaPrints_DistributionMap_Block_Map_Static */
$url = $this->getBaseGoogleUrl();
?>
<!-- <?php echo get_class($this);?> -->
<script type="text/javascript">
  Event.observe(window, 'load', replaceStaticMap);
  var kmls = null;
  var base_url = '<?php echo $url;?>';
  <?php if($kml = $this->renderKml()):?>
    kmls = <?php echo $kml;?>
  <?php endif;?>


  function replaceStaticMap() {
    var labels = $$('div.item-text .item-options > dt'); // option label is here
    var options = [];
    var regex = new RegExp('\\*\\*\\*kml\\*\\*\\*\s*$', 'i');
    if(!labels || labels.length == 0){
      return;
    }
    labels.each(function(l) {
      var self = $(l);
      var map = '';
      var content = self.innerHTML; // original label
      var clean = content.stripTags().strip(); // get label content stripped of tags and white space
      if (regex.test(clean)) {
        var opt = self.next('dd');
        var truncated_full = opt.innerHTML;
        if(truncated_full.indexOf('... <span ') != -1){
          opt.stopObserving('mouseover').stopObserving('mouseout');
          var span = opt.down('span');
          var script = opt.down('script');
          Element.replace(span, '');
          Element.replace(script,'');
        }
        truncated_full = opt.innerHTML.strip().unescapeHTML();
        if (truncated_full) {
          var full_value = truncated_full.replace(/\s*\.\.\.\s*$/im,'').unescapeHTML();
          try{
            var obj = full_value.evalJSON(true);
            var nodes = [];
            for( var i in obj) {
              var co = obj[i];
              var lat = co.lat;
              var lng = co.lng;
              nodes.push(lat + ',' + lng);
            }
            nodes.push(nodes[0]);
            nodes = nodes.join('|');
            var src = base_url + encodeURIComponent(nodes);
            map = '<img alt="Map" src="' + src + '" />';
          }catch(e){
            alert('JavaScript error. Cannot render map.');
            return;
          }
          opt.innerHTML = (map == '')? full_value: map;
          opt.kml = addKml(kmls, full_value);
        }
        options.push(opt);
        console.log(content);
        content = content.replace(regex, '');
        self.update(content);
      }
    });
    options.each(function(o) {
//      o.innerHTML = o.innerHTML.unescapeHTML();
      if(o.kml) {
        $(o).insert('<br/>' + o.kml);
      }
    });
  }

  function addKml(kmls, value) {
    try{
      var result = '';
      if(kmls && kmls.size()){
        kmls.each(function(kml){
          if(result) {
            return;
          }
          var opt = kml.option.strip().unescapeHTML();
          var val = value.strip().unescapeHTML();
          if(opt == val){
            result = kml.kml;
          }
        });
      }
    }catch(e) {
      console.warn(e);
    }
    return result;
  }
</script>
